@inject IJSRuntime JSAsync;
@implements Core.IHost;

<div class="main" style="background-color: @mBackColor;width:100%; height: 100% ">
    <canvas @ref="canvas" class="center" width=@mWidth height=@mHeight @onkeydown="canvas_keydown" @onkeydown:preventDefault>Your browser does not support the canvas element.</canvas>
</div>
@code {
    ElementReference canvas;

    class ChangeGameLoop : Core.ILoop
    {
        private Host mHost;
        private Core.Game mGame;
        private bool mUnLoadGameAct;
        private Task mChangeGameTask;

        public ChangeGameLoop(Host argHost, Core.Game argGame, bool argUnLoadGameAct)
        {
            mHost = argHost;
            mGame = argGame;
            mUnLoadGameAct = argUnLoadGameAct;
        }

        public void Loop(Core.GameTime argTime)
        {
            if (mChangeGameTask == null)
                mChangeGameTask = mHost.StartChangeGame(mGame, mUnLoadGameAct);
        }
    }

    private IJSInProcessRuntime JS;
    private IJSUnmarshalledRuntime Js;
    private string mBackColor = "black";
    private int mWidth = 800;
    private int mHeight = 600;
    private string mContext;
    private Core.ILoop mLoop = Core.VoidLoop.Instance;
    private Core.Game mGameAct;
    private Core.GameTime mTime;

    [Parameter]
    public Core.App App { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        JS = (IJSInProcessRuntime)JSAsync;
        Js = (IJSUnmarshalledRuntime)JSAsync;
        mTime = new Core.GameTime();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        await JSAsync.InvokeVoidAsync("juegecitos.init", DotNetObjectReference.Create(this), canvas);

        if (App != null)
        {
            var pGame = App.Main() ?? await App.MainAsync();

            ChangeGame(pGame);
        }
    }

    [JSInvokable]
    public void Loop(float timeStamp)
    {
        if (mTime.TimeStamp > 0)
        {
            mTime.ElapsedGameTime = timeStamp - mTime.TimeStamp;
            mTime.TotalGameTime += mTime.ElapsedGameTime;
        }
        mTime.TimeStamp = timeStamp;

        mLoop.Loop(mTime);
        //Update();
        //Render();
    }

    private void canvas_keydown(KeyboardEventArgs e)
    {

    }

    public void SetLoop(Core.ILoop argLoop) => mLoop = argLoop;

    public void ChangeGame(Core.Game argGame, bool argUnLoadGameAct = true)
        => SetLoop(new ChangeGameLoop(this, argGame, argUnLoadGameAct));

    private Task StartChangeGame(Core.Game argGame, bool argUnLoadGameAct)
        => Task.Run(() => ChangeGameInternal(argGame, argUnLoadGameAct));

    private void ChangeGameInternal(Core.Game argGame, bool argUnLoadGameAct = true)
    {
        if (argUnLoadGameAct)
            if (mGameAct != null)
            {
                mLoop = Core.VoidLoop.Instance;
                mGameAct.UnLoad();
                mGameAct = null;
            }

        mGameAct = argGame;
        mGameAct.AsignHost(this);
        mGameAct.Initialize();
        if (!string.Equals(mBackColor, mGameAct.PresentationParameters.BackColor))
            mBackColor = mGameAct.PresentationParameters.BackColor;
        if (mWidth != mGameAct.PresentationParameters.Width)
            mWidth = mGameAct.PresentationParameters.Width;
        if (mHeight != mGameAct.PresentationParameters.Height)
            mHeight = mGameAct.PresentationParameters.Height;
        if (!string.Equals(mContext, mGameAct.PresentationParameters.CanvasContext))
            SetContext(mGameAct.PresentationParameters.CanvasContext);
        if (mGameAct.PresentationParameters.MainScene != null)
        {
            SetActiveScene(mGameAct.PresentationParameters.MainScene);
        }
    }

    public void SetActiveScene(Core.Scene argScene)
    {
        argScene.Game.AsignActiveScene(argScene);
        SetLoop(argScene);
    }

    public void SetContext(string type)
    {
        JS.InvokeVoid("juegecitos.setContext", type);
        mContext = type;
    }

    public void clearRect(int x, int y, int width, int height) => JS.InvokeVoid("juegecitos.clearRect", x, y, width, height);
    public void setfillStyle(string style) => Js.InvokeUnmarshalled<string, int>("juegecitos.setfillStyle", style);
    public void fillRect(int x, int y, int width, int height) => JS.InvokeVoid("juegecitos.fillRect", x, y, width, height);
    public void setfont(string font) => Js.InvokeUnmarshalled<string, int>("juegecitos.setfont", font);
    public void strokeText(string text, int x, int y) => Js.InvokeUnmarshalled<string, int, int, int>("juegecitos.strokeText", text, x, y);
    public void fillText(string text, int x, int y) => Js.InvokeUnmarshalled<string, int, int, int>("juegecitos.fillText", text, x, y);
    public void setTransform(float a, float b, float c, float d, float e, float f) => JS.InvokeVoid("juegecitos.setTransform", a, b, c, d, e, f);

    private void CreateGameInternal<T>(Core.Game argGame)
    {
        mGameAct = argGame;
        argGame.AsignHost(this);
        argGame.Initialize();
        if (!string.Equals(mBackColor, argGame.PresentationParameters.BackColor))
            mBackColor = argGame.PresentationParameters.BackColor;
        if (mWidth != argGame.PresentationParameters.Width)
            mWidth = argGame.PresentationParameters.Width;
        if (mHeight != argGame.PresentationParameters.Height)
            mHeight = argGame.PresentationParameters.Height;
        if (!string.Equals(mContext, argGame.PresentationParameters.CanvasContext))
            SetContext(argGame.PresentationParameters.CanvasContext);

        var pScene=argGame.PresentationParameters.MainScene;

        if (pScene!= null)
            CreateSceneInternal(pScene);
    }

    private void CreateSceneInternal(Core.Scene argScene)
    {
        argScene.Initialize();
    }
}
