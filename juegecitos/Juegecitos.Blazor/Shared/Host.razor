@inject IJSRuntime JSAsync;
@using System.Runtime.InteropServices
@implements Core.IHost;

<div @ref="main" class="main" style="opacity: 1; width: 100%; height: 100% ">
    <canvas @ref="canvas" class="center" @onkeydown="canvas_keydown" @onkeydown:preventDefault @onkeyup="canvas_keyup" @onkeyup:preventDefault>Your browser does not support the canvas element.</canvas>
</div>
@code {
    [StructLayout(LayoutKind.Explicit)]
    public struct Info
    {
        [FieldOffset(0)]
        public string BackColor;

        [FieldOffset(0 + 8)]
        public int Width;

        [FieldOffset(0 + 8 + 4)]
        public int Height;

        [FieldOffset(0 + 8 + 4 + 4)]
        public string Context;
    }

    ElementReference main;
    ElementReference canvas;

    private IJSInProcessRuntime JS;
    private IJSUnmarshalledRuntime Js;
    private Core.ILoop mLoop = Core.VoidLoop.Instance;
    private Core.Game mGameAct;
    private Info mInfo = new Info();
    private Core.GameTime mTime;

    public Core.Input.InputSystem Input { get; } = new Core.Input.InputSystem();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        JS = (IJSInProcessRuntime)JSAsync;
        Js = (IJSUnmarshalledRuntime)JSAsync;
        mTime = new Core.GameTime();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        await JSAsync.InvokeVoidAsync("juegecitos.init", DotNetObjectReference.Create(this), main, canvas);
    }

    [JSInvokable]
    public void Loop(float timeStamp)
    {
        if (mTime.TimeStamp > 0)
        {
            mTime.ElapsedGameTime = timeStamp - mTime.TimeStamp;
            if (mGameAct != null)
                mGameAct.TotalTime += mTime.ElapsedGameTime;
        }
        mTime.TimeStamp = timeStamp;

        mLoop.Loop(mTime);
        //Update();
        //Render();
        Input.AfterUpdate();
    }

    private void canvas_keydown(KeyboardEventArgs e)
    {
        Input.Keyboard.AddKey(new Core.Input.KeyInfo
        {
            Key = e.Key,
            Code = e.Code,
            State = Core.Input.EButtonState.Down
        });
    }

    private void canvas_keyup(KeyboardEventArgs e)
    {
        Input.Keyboard.AddKey(new Core.Input.KeyInfo
        {
            Key = e.Key,
            Code = e.Code,
            State = Core.Input.EButtonState.Up
        });
    }

    public void SetLoop(Core.ILoop argLoop) => mLoop = argLoop;

    public void ChangeGame(Core.Game argGame, bool argUnLoadGameAct = true)
    {
        if (argUnLoadGameAct)
            if (mGameAct != null)
            {
                mLoop = Core.VoidLoop.Instance;
                if (mGameAct.ActiveScene != null)
                {
                    if (mGameAct.ActiveScene.IsLoaded)
                        mGameAct.ActiveScene.UnLoad();
                }
                if (mGameAct.IsLoaded)
                    mGameAct.UnLoad();
                mGameAct = null;
            }

        mGameAct = argGame;
        if (!mGameAct.IsLoaded)
        {
            mLoop = Core.VoidLoop.Instance;
            mGameAct.Host = this;
            mGameAct.Load();
            mGameAct.BackColor = mGameAct.PresentationParameters.BackColor;
            mGameAct.Width = mGameAct.PresentationParameters.Width;
            mGameAct.Height = mGameAct.PresentationParameters.Height;
            mGameAct.CanvasContext = mGameAct.PresentationParameters.CanvasContext;
            mGameAct.ActiveScene = mGameAct.PresentationParameters.MainScene;
        }
        if (string.Equals(mInfo.Context, "2d"))
        {
            if (mInfo.Width != mGameAct.Width || mInfo.Height != mGameAct.Height)
                clearRect(0, 0, mInfo.Width, mInfo.Height);
        }
        mInfo.BackColor = mGameAct.BackColor;
        mInfo.Width = mGameAct.Width;
        mInfo.Height = mGameAct.Height;
        mInfo.Context = mGameAct.CanvasContext;
        ChangedGame();
        SetActiveScene(mGameAct.ActiveScene);
    }

    public void SetActiveScene(Core.Scene argScene)
    {
        if (!argScene.IsLoaded)
        {
            argScene.Load();
        }
        ChangedGame();
        SetLoop(argScene);
    }

    public void ChangedGame() => Js.InvokeUnmarshalled<Info, int>("juegecitos.changeGame", mInfo);

    public void clearRect(int x, int y, int width, int height) => JS.InvokeVoid("juegecitos.clearRect", x, y, width, height);
    public void setfillStyle(string style) => Js.InvokeUnmarshalled<string, int>("juegecitos.setfillStyle", style);
    public void fillRect(int x, int y, int width, int height) => JS.InvokeVoid("juegecitos.fillRect", x, y, width, height);
    public void setfont(string font) => Js.InvokeUnmarshalled<string, int>("juegecitos.setfont", font);
    public void strokeText(string text, int x, int y) => Js.InvokeUnmarshalled<string, int, int, int>("juegecitos.strokeText", text, x, y);
    public void fillText(string text, int x, int y) => Js.InvokeUnmarshalled<string, int, int, int>("juegecitos.fillText", text, x, y);
    public void setTransform(float a, float b, float c, float d, float e, float f) => JS.InvokeVoid("juegecitos.setTransform", a, b, c, d, e, f);
}
